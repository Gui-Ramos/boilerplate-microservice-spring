plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'org.liquibase.gradle' version '2.2.0'
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.microservice'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.diffplug.spotless:spotless-lib:2.45.0'
	implementation 'org.postgresql:postgresql:42.7.2'
	liquibaseRuntime 'org.liquibase:liquibase-core:4.23.0'
	liquibaseRuntime 'info.picocli:picocli:4.7.4'
	liquibaseRuntime 'org.postgresql:postgresql:42.7.2'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

liquibase {
	activities {
		main {
			changeLogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
			classpath 'src/main/resources'
			referenceUrl 'hibernate:spring:com.microservice.boilerplate.model?dialect=org.hibernate.dialect.PostgreSQLDialect'
			url 'jdbc:postgresql://localhost:5433/postgres'
			username 'postgres'
			password 'admin'
			driver 'org.postgresql.Driver'
		}
	}
	runList = "main"
}

spotless {
	java {
		target fileTree('.') {
			include '**/*.java'
			exclude '**/build/**', '**/build-*/**'
		}
		toggleOffOn()
		palantirJavaFormat()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}


tasks.register('installLocalGitHook', Copy) {
	from 'scripts'
	into '.git/hooks'
	fileMode 0775
}

compileJava {
	dependsOn 'installLocalGitHook'
}
