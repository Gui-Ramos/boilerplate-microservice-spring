#!/bin/bash

# Identificar a branch atual
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

echo "Current branch: $CURRENT_BRANCH"

echo "Fetching updates from origin..."
git fetch --all

# Resetar a branch local para garantir sincronização com a remota
echo "Resetting local branch to match origin..."
git reset --hard origin/$CURRENT_BRANCH

# Obter histórico de commits baseado na branch
if [ "$CURRENT_BRANCH" = "develop" ]; then
  echo "Analyzing commits on develop branch..."
  LAST_TAG=$(git describe --tags --abbrev=0 origin/develop 2>/dev/null || echo "")
  if [ -z "$LAST_TAG" ]; then
    echo "No tags found. Listing all commits in develop."
    COMMITS=$(git log origin/develop --pretty=format:"%s")
  else
    COMMITS=$(git log ${LAST_TAG}..origin/develop --pretty=format:"%s")
  fi

elif [ "$CURRENT_BRANCH" = "release" ]; then
  echo "Analyzing commits on release branch..."
  BASE_COMMIT=$(git merge-base origin/develop HEAD)
  COMMITS=$(git log ${BASE_COMMIT}..HEAD --pretty=format:"%s")

elif [ "$CURRENT_BRANCH" = "main" ]; then
  echo "Analyzing commits on main branch..."

  # Tentar usar a última tag como referência
  LAST_TAG=$(git describe --tags --abbrev=0 origin/main 2>/dev/null || echo "")

  if [ -z "$LAST_TAG" ]; then
    echo "No tags found. Using the merge-base with release as reference."
    BASE_COMMIT=$(git merge-base origin/release HEAD)
    COMMITS=$(git log ${BASE_COMMIT}..HEAD --pretty=format:"%s")
  else
    echo "Last tag: $LAST_TAG"
    COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
  fi

else
  echo "Unknown branch: $CURRENT_BRANCH. Exiting."
  exit 1
fi

# Exibir mensagens de commit
echo "Commits found:"
echo "$COMMITS"

# Determinar escopo da versão com base nas mensagens de commit
if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
  SCOPE=major
elif echo "$COMMITS" | grep -E -q '^.*!'; then
  SCOPE=major
elif echo "$COMMITS" | grep -E -q '^(feat)'; then
  SCOPE=minor
elif echo "$COMMITS" | grep -E -q '^(fix)'; then
  SCOPE=patch
else
  SCOPE=patch
fi

# Exibir escopo determinado
echo "Determined scope: $SCOPE"

# Exportar o escopo para o GitHub Actions
echo "SCOPE=$SCOPE" >> $GITHUB_ENV
